{
  "global": {},
  "serversTransport": {
    "insecureSkipVerify": true,
    "maxIdleConnsPerHost": 200
  },
  "entryPoints": {
    "private": {
      "address": ":8083",
      "transport": {
        "lifeCycle": { "graceTimeOut": "10s" },
        "respondingTimeouts": { "idleTimeout": "3m0s" }
      },
      "forwardedHeaders": {},
      "http": {},
      "http2": { "maxConcurrentStreams": 250 },
      "udp": { "timeout": "3s" }
    },
    "web": {
      "address": ":80",
      "transport": {
        "lifeCycle": { "graceTimeOut": "10s" },
        "respondingTimeouts": { "idleTimeout": "3m0s" }
      },
      "forwardedHeaders": {},
      "http": {
        "redirections": {
          "entryPoint": {
            "to": "websecure",
            "scheme": "https",
            "permanent": true,
            "priority": 2147483646
          }
        }
      },
      "http2": { "maxConcurrentStreams": 250 },
      "udp": { "timeout": "3s" }
    },
    "websecure": {
      "address": ":443",
      "transport": {
        "lifeCycle": { "graceTimeOut": "10s" },
        "respondingTimeouts": { "idleTimeout": "3m0s" }
      },
      "forwardedHeaders": { "insecure": true },
      "http": { "tls": {} },
      "http2": { "maxConcurrentStreams": 250 },
      "udp": { "timeout": "3s" }
    }
  },
  "providers": {
    "providersThrottleDuration": "2s",
    "docker": {
      "watch": true,
      "endpoint": "unix:///var/run/docker.sock",
      "defaultRule": "Host(`{{ normalize .Name }}`)",
      "network": "proxy",
      "swarmModeRefreshSeconds": "15s"
    }
  },
  "api": { "dashboard": true },
  "metrics": {
    "prometheus": {
      "buckets": [0.1, 0.3, 1.2, 5],
      "addEntryPointsLabels": true,
      "addRoutersLabels": true,
      "addServicesLabels": true,
      "entryPoint": "private",
      "manualRouting": true
    }
  },
  "ping": { "entryPoint": "private", "terminatingStatusCode": 503 },
  "log": { "level": "DEBUG", "format": "JSON" },
  "experimental": { "localPlugins": { "shorty": { "moduleName": "shorty" } } }
}
